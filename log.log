
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.14+51 (git sha1 a41c1df76, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `./examples/verilog/script2.sh' --

1. Executing Verilog-2005 frontend: ./examples/verilog/tests/verilog/release/test01/top_primitive.v
Parsing SystemVerilog input from `./examples/verilog/tests/verilog/release/test01/top_primitive.v' to AST representation.
Storing AST representation for module `$abstract\top'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

3. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.

3.1. Analyzing design hierarchy..
Top module:  \top

3.2. Analyzing design hierarchy..
Top module:  \top
Removing unused module `$abstract\top'.
Removed 1 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

5. Executing FSM pass (extract and optimize FSM).

5.1. Executing FSM_DETECT pass (finding FSMs in design).

5.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 36 unused wires.
<suppressed ~1 debug messages>

5.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

6.9. Finished OPT passes. (There is nothing left to do.)

7. Executing MEMORY pass.

7.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

7.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

7.9. Executing MEMORY_COLLECT pass (generating $mem cells).

7.10. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /Users/gordon/Documents/Lab/oss-cad-suite/libexec/../share/yosys/techmap.v
Parsing Verilog input from `/Users/gordon/Documents/Lab/oss-cad-suite/libexec/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~117 debug messages>

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=18.00) is a direct match for cell type $_DFFSR_PPP_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    \DFFSR _DFFSR_PPP_ (.C( C), .D( D), .Q( Q), .R( R), .S( S));

11.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\top':

12. Executing ABC pass (technology mapping using ABC).

12.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 46 gates and 58 wires to a netlist network with 12 inputs and 4 outputs.

12.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/gordon/Documents/Lab/oss-cad-suite/./examples/verilog/cmos_cells2.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/Users/gordon/Documents/Lab/oss-cad-suite/./examples/verilog/cmos_cells2.lib" has 3 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

12.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       56
ABC RESULTS:               NOT cells:       58
ABC RESULTS:        internal signals:       42
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        4
Removing temp directory.
Removed 0 unused cells and 58 unused wires.

13. Executing Verilog backend.

13.1. Executing BMUXMAP pass.

13.2. Executing DEMUXMAP pass.
Dumping module `\top'.

End of script. Logfile hash: b66cd3f985, CPU: user 0.08s system 0.02s
Yosys 0.14+51 (git sha1 a41c1df76, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 50% 1x abc (0 sec), 10% 3x read_verilog (0 sec), ...
ABC command line: "source ./script_test.sh".

Object Id = 17, name = n17
  Fanin-0: Id = 5, name = in2[0] ,type=2 
  Fanin-1: Id = 9, name = in3[0] ,type=2 
Object Id = 18, name = n18
  Fanin-0: Id = 5, name = in2[0] ,type=2 
  Fanin-1: Id = 9, name = in3[0] ,type=2 
Object Id = 19, name = n19
  Fanin-0: Id = 1, name = in1[0] ,type=2 
  Fanin-1: Id = 18, name = n18 ,type=7 
Object Id = 20, name = n20
  Fanin-0: Id = 17, name = n17 ,type=7 
  Fanin-1: Id = 19, name = n19 ,type=7 
Object Id = 21, name = n21
  Fanin-0: Id = 17, name = n17 ,type=7 
  Fanin-1: Id = 18, name = n18 ,type=7 
Object Id = 22, name = n22
  Fanin-0: Id = 1, name = in1[0] ,type=2 
  Fanin-1: Id = 21, name = n21 ,type=7 
Object Id = 23, name = n23
  Fanin-0: Id = 20, name = n20 ,type=7 
  Fanin-1: Id = 22, name = n22 ,type=7 
Object Id = 24, name = n24
  Fanin-0: Id = 1, name = in1[0] ,type=2 
  Fanin-1: Id = 17, name = n17 ,type=7 
Object Id = 25, name = n25
  Fanin-0: Id = 18, name = n18 ,type=7 
  Fanin-1: Id = 24, name = n24 ,type=7 
Object Id = 26, name = n26
  Fanin-0: Id = 2, name = in1[1] ,type=2 
  Fanin-1: Id = 10, name = in3[1] ,type=2 
Object Id = 27, name = n27
  Fanin-0: Id = 2, name = in1[1] ,type=2 
  Fanin-1: Id = 10, name = in3[1] ,type=2 
Object Id = 28, name = n28
  Fanin-0: Id = 26, name = n26 ,type=7 
  Fanin-1: Id = 27, name = n27 ,type=7 
Object Id = 29, name = n29
  Fanin-0: Id = 6, name = in2[1] ,type=2 
  Fanin-1: Id = 28, name = n28 ,type=7 
Object Id = 30, name = n30
  Fanin-0: Id = 6, name = in2[1] ,type=2 
  Fanin-1: Id = 28, name = n28 ,type=7 
Object Id = 31, name = n31
  Fanin-0: Id = 29, name = n29 ,type=7 
  Fanin-1: Id = 30, name = n30 ,type=7 
Object Id = 32, name = n32
  Fanin-0: Id = 25, name = n25 ,type=7 
  Fanin-1: Id = 31, name = n31 ,type=7 
Object Id = 33, name = n33
  Fanin-0: Id = 17, name = n17 ,type=7 
  Fanin-1: Id = 19, name = n19 ,type=7 
Object Id = 34, name = n34
  Fanin-0: Id = 31, name = n31 ,type=7 
  Fanin-1: Id = 33, name = n33 ,type=7 
Object Id = 35, name = n35
  Fanin-0: Id = 32, name = n32 ,type=7 
  Fanin-1: Id = 34, name = n34 ,type=7 
Object Id = 36, name = n36
  Fanin-0: Id = 30, name = n30 ,type=7 
  Fanin-1: Id = 33, name = n33 ,type=7 
Object Id = 37, name = n37
  Fanin-0: Id = 29, name = n29 ,type=7 
  Fanin-1: Id = 36, name = n36 ,type=7 
Object Id = 38, name = n38
  Fanin-0: Id = 3, name = in1[2] ,type=2 
  Fanin-1: Id = 7, name = in2[2] ,type=2 
Object Id = 39, name = n39
  Fanin-0: Id = 3, name = in1[2] ,type=2 
  Fanin-1: Id = 7, name = in2[2] ,type=2 
Object Id = 40, name = n40
  Fanin-0: Id = 38, name = n38 ,type=7 
  Fanin-1: Id = 39, name = n39 ,type=7 
Object Id = 41, name = n41
  Fanin-0: Id = 11, name = in3[2] ,type=2 
  Fanin-1: Id = 40, name = n40 ,type=7 
Object Id = 42, name = n42
  Fanin-0: Id = 11, name = in3[2] ,type=2 
  Fanin-1: Id = 40, name = n40 ,type=7 
Object Id = 43, name = n43
  Fanin-0: Id = 41, name = n41 ,type=7 
  Fanin-1: Id = 42, name = n42 ,type=7 
Object Id = 44, name = n44
  Fanin-0: Id = 26, name = n26 ,type=7 
  Fanin-1: Id = 43, name = n43 ,type=7 
Object Id = 45, name = n45
  Fanin-0: Id = 26, name = n26 ,type=7 
  Fanin-1: Id = 43, name = n43 ,type=7 
Object Id = 46, name = n46
  Fanin-0: Id = 44, name = n44 ,type=7 
  Fanin-1: Id = 45, name = n45 ,type=7 
Object Id = 47, name = n47
  Fanin-0: Id = 37, name = n37 ,type=7 
  Fanin-1: Id = 46, name = n46 ,type=7 
Object Id = 48, name = n48
  Fanin-0: Id = 37, name = n37 ,type=7 
  Fanin-1: Id = 46, name = n46 ,type=7 
Object Id = 49, name = n49
  Fanin-0: Id = 47, name = n47 ,type=7 
  Fanin-1: Id = 48, name = n48 ,type=7 
Object Id = 50, name = n50
  Fanin-0: Id = 11, name = in3[2] ,type=2 
  Fanin-1: Id = 39, name = n39 ,type=7 
Object Id = 51, name = n51
  Fanin-0: Id = 38, name = n38 ,type=7 
  Fanin-1: Id = 50, name = n50 ,type=7 
Object Id = 52, name = n52
  Fanin-0: Id = 4, name = in1[3] ,type=2 
  Fanin-1: Id = 12, name = in3[3] ,type=2 
Object Id = 53, name = n53
  Fanin-0: Id = 4, name = in1[3] ,type=2 
  Fanin-1: Id = 12, name = in3[3] ,type=2 
Object Id = 54, name = n54
  Fanin-0: Id = 52, name = n52 ,type=7 
  Fanin-1: Id = 53, name = n53 ,type=7 
Object Id = 55, name = n55
  Fanin-0: Id = 8, name = in2[3] ,type=2 
  Fanin-1: Id = 54, name = n54 ,type=7 
Object Id = 56, name = n56
  Fanin-0: Id = 8, name = in2[3] ,type=2 
  Fanin-1: Id = 54, name = n54 ,type=7 
Object Id = 57, name = n57
  Fanin-0: Id = 55, name = n55 ,type=7 
  Fanin-1: Id = 56, name = n56 ,type=7 
Object Id = 58, name = n58
  Fanin-0: Id = 51, name = n51 ,type=7 
  Fanin-1: Id = 57, name = n57 ,type=7 
Object Id = 59, name = n59
  Fanin-0: Id = 11, name = in3[2] ,type=2 
  Fanin-1: Id = 38, name = n38 ,type=7 
Object Id = 60, name = n60
  Fanin-0: Id = 39, name = n39 ,type=7 
  Fanin-1: Id = 59, name = n59 ,type=7 
Object Id = 61, name = n61
  Fanin-0: Id = 57, name = n57 ,type=7 
  Fanin-1: Id = 60, name = n60 ,type=7 
Object Id = 62, name = n62
  Fanin-0: Id = 58, name = n58 ,type=7 
  Fanin-1: Id = 61, name = n61 ,type=7 
Object Id = 63, name = n63
  Fanin-0: Id = 37, name = n37 ,type=7 
  Fanin-1: Id = 44, name = n44 ,type=7 
Object Id = 64, name = n64
  Fanin-0: Id = 45, name = n45 ,type=7 
  Fanin-1: Id = 63, name = n63 ,type=7 
Object Id = 65, name = n65
  Fanin-0: Id = 62, name = n62 ,type=7 
  Fanin-1: Id = 64, name = n64 ,type=7 
Object Id = 66, name = n66
  Fanin-0: Id = 51, name = n51 ,type=7 
  Fanin-1: Id = 57, name = n57 ,type=7 
Object Id = 67, name = n67
  Fanin-0: Id = 57, name = n57 ,type=7 
  Fanin-1: Id = 60, name = n60 ,type=7 
Object Id = 68, name = n68
  Fanin-0: Id = 66, name = n66 ,type=7 
  Fanin-1: Id = 67, name = n67 ,type=7 
Object Id = 69, name = n69
  Fanin-0: Id = 37, name = n37 ,type=7 
  Fanin-1: Id = 45, name = n45 ,type=7 
Object Id = 70, name = n70
  Fanin-0: Id = 44, name = n44 ,type=7 
  Fanin-1: Id = 69, name = n69 ,type=7 
Object Id = 71, name = n71
  Fanin-0: Id = 68, name = n68 ,type=7 
  Fanin-1: Id = 70, name = n70 ,type=7 
Object Id = 72, name = n72
  Fanin-0: Id = 65, name = n65 ,type=7 
  Fanin-1: Id = 71, name = n71 ,type=7 
fanin Id = 1, name = in1[0]
fanin Id = 2, name = in1[1]
fanin Id = 3, name = in1[2]
fanin Id = 4, name = in1[3]
fanin Id = 5, name = in2[0]
fanin Id = 6, name = in2[1]
fanin Id = 7, name = in2[2]
fanin Id = 8, name = in2[3]
fanin Id = 9, name = in3[0]
fanin Id = 10, name = in3[1]
fanin Id = 11, name = in3[2]
fanin Id = 12, name = in3[3]
in1 0
id 4 0
in1 1
id 15 1
in1 2
id 31 2
in1 3
id 49 3
in2 0
id 1 0
in2 1
id 14 1
in2 2
id 32 2
in2 3
id 48 3
in3 0
id 2 0
in3 1
id 16 1
in3 2
id 30 2
in3 3
id 50 3
7 0 7
9 9 18
1 8 9
12 14 26
6 12 18
11 8 19
6 14 20
7 15 22
1 9 10
2 7 9
12 5 17
14 14 28
2 3 5
6 1 7
1 2 3
4 7 11
12 13 25
6 2 8
14 14 28
0 0 0
14 1 15
12 9 21
2 8 10
14 8 22
0 0 0
8 12 20
0 15 15
8 2 10
10 10 20
12 0 12
4 9 13
0 0 0
a:00000000000000000100000110100111
a:00010000110101100011101011110001
a:01100000101101111010110011011001
a:00111010101101010000110000101010
b:01000100001100011011011110000010
b:00011100000001101101101011001000
b:00000110000001011000111011011000
b:01010110111001010000100111111110
c:01000100001100011111011000100101
c:00001100110100001110000110111011
c:01110110101101000011100011000001
c:01101100010101111000101100001100
c:00010010101001010000110011111010
7 11 18
18 1 19
9 10 19
26 6 32
18 12 30
19 0 19
20 11 31
22 4 26
10 1 11
9 1 10
17 11 28
28 13 41
5 12 17
7 9 16
3 0 3
11 4 15
25 1 26
8 5 13
28 14 42
0 8 8
15 13 28
21 11 32
10 9 19
22 3 25
0 6 6
20 11 31
15 3 18
10 0 10
20 7 27
12 6 18
13 11 24
0 0 0
a:01000100001100011111011000100101
a:00001100110100001110000110111011
a:01110110101101000011100011000001
a:01101100010101111000101100001100
a:00010010101001010000110011111010
b:01010110111100110010111101000011
b:01110111101001000000010001001101
b:00110001000101101001100010011000
b:01000010011111000011110001010101
c:00010010110000101101100101100110
c:00111111010001011100001111110111
c:00000011000100101000010001010000
c:01011010100111111000111111010000
c:01110110110100010011010011110111
c:00000000001001000000100000001000
match: n44
Nodes = 56.  Cuts = 248.  Cuts/Node = 4.43.  Ints/Node = 17.50.
